import cv2
import dlib
import pyaudio
import wave
import os

# Set the path for storing audio recordings
audio_path = r"\\companyA\drive\audio_recordings"

# Create the audio path if it doesn't exist
if not os.path.exists(audio_path):
    os.makedirs(audio_path)

# Initialize the face detector and facial landmarks predictor
detector = dlib.get_frontal_face_detector()
predictor_path = "shape_predictor_68_face_landmarks.dat"  # Download from http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2
predictor = dlib.shape_predictor(predictor_path)

# Initialize the camera
cap = cv2.VideoCapture(0)

# Initialize PyAudio for audio input
p = pyaudio.PyAudio()
stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)

# Function to save audio recording to a WAV file
def save_audio(filename, frames):
    wf = wave.open(filename, 'wb')
    wf.setnchannels(1)
    wf.setsampwidth(pyaudio.PyAudio().get_sample_size(pyaudio.paInt16))
    wf.setframerate(44100)
    wf.writeframes(b''.join(frames))
    wf.close()

# Main loop for capturing frames and performing facial recognition
while True:
    ret, frame = cap.read()

    # Perform facial recognition
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = detector(gray)

    for face in faces:
        landmarks = predictor(gray, face)

        # Draw landmarks on the face
        for n in range(68):
            x = landmarks.part(n).x
            y = landmarks.part(n).y
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)

    # Display the frame with facial landmarks
    cv2.imshow("Facial Recognition", frame)

    # Record audio
    audio_frame = stream.read(1024)
    audio_frames = [audio_frame]

    # Check for user input to stop the script
    key = cv2.waitKey(1)
    if key == 27:  # Press 'Esc' to exit
        break

# Save the audio recording
audio_filename = os.path.join(audio_path, "audio_recording.wav")
save_audio(audio_filename, audio_frames)

# Release resources
cap.release()
cv2.destroyAllWindows()
stream.stop_stream()
stream.close()
p.terminate()
